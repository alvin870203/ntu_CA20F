
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `cpu.ys' --

1. Executing Verilog-2005 frontend: add.v
Parsing Verilog input from `add.v' to AST representation.
Generating RTLIL representation for module `\adder'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \adder

2.1.2. Analyzing design hierarchy..
Top module:  \adder
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$add.v:16$1 in module adder.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).

2.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \i_rst_n in `\adder.$proc$add.v:16$1'.

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\adder.$proc$add.v:29$3'.
     1/3: $0\c_w[63:0]
     2/3: $0\tempb_w[32:0]
     3/3: $0\tempa_w[32:0]
Creating decoders for process `\adder.$proc$add.v:16$1'.
     1/3: $0\c_r[63:0]
     2/3: $0\tempb_r[32:0]
     3/3: $0\tempa_r[32:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\adder.\tempa_w' from process `\adder.$proc$add.v:29$3'.
No latch inferred for signal `\adder.\tempb_w' from process `\adder.$proc$add.v:29$3'.
No latch inferred for signal `\adder.\c_w' from process `\adder.$proc$add.v:29$3'.

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\adder.\tempa_r' using process `\adder.$proc$add.v:16$1'.
  created $adff cell `$procdff$7' with positive edge clock and negative level reset.
Creating register for signal `\adder.\tempb_r' using process `\adder.$proc$add.v:16$1'.
  created $adff cell `$procdff$8' with positive edge clock and negative level reset.
Creating register for signal `\adder.\c_r' using process `\adder.$proc$add.v:16$1'.
  created $adff cell `$procdff$9' with positive edge clock and negative level reset.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `adder.$proc$add.v:29$3'.
Removing empty process `adder.$proc$add.v:16$1'.
Cleaned up 0 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Removed 1 unused cells and 9 unused wires.
<suppressed ~2 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module adder..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

2.6.9. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 33) from FF cell adder.$procdff$8 ($adff).
Removed top 1 bits (of 33) from port Y of cell adder.$add$add.v:31$6 ($add).
Removed top 1 bits (of 33) from port A of cell adder.$add$add.v:31$6 ($add).
Removed top 1 bits (of 33) from port Y of cell adder.$add$add.v:31$5 ($add).
Removed top 1 bits (of 33) from wire adder.$add$add.v:31$5_Y.
Removed top 1 bits (of 33) from wire adder.tempb_r.
Removed top 1 bits (of 33) from wire adder.tempb_w.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adder:
  creating $macc model for $add$add.v:30$4 ($add).
  creating $macc model for $add$add.v:31$5 ($add).
  creating $macc model for $add$add.v:31$6 ($add).
  merging $macc model for $add$add.v:31$5 into $add$add.v:31$6.
  creating $alu model for $macc $add$add.v:31$6.
  creating $alu model for $macc $add$add.v:30$4.
  creating $alu cell for $add$add.v:30$4: $auto$alumacc.cc:474:replace_alu$13
  creating $alu cell for $add$add.v:31$6: $auto$alumacc.cc:474:replace_alu$16
  created 2 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

2.20.9. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=33 for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=33 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~702 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
<suppressed ~76 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Removed 79 unused cells and 62 unused wires.
<suppressed ~80 debug messages>

2.22.5. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\adder' to `<abc-temp-dir>/input.blif'..
Extracted 458 gates and 587 wires to a netlist network with 129 inputs and 65 outputs.

2.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       30
ABC RESULTS:            ANDNOT cells:       60
ABC RESULTS:              AOI3 cells:       40
ABC RESULTS:              NAND cells:       37
ABC RESULTS:               NOR cells:       13
ABC RESULTS:               NOT cells:       32
ABC RESULTS:              OAI3 cells:       36
ABC RESULTS:                OR cells:       34
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:              XNOR cells:       55
ABC RESULTS:               XOR cells:       72
ABC RESULTS:        internal signals:      393
ABC RESULTS:           input signals:      129
ABC RESULTS:          output signals:       65
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Removed 0 unused cells and 407 unused wires.
<suppressed ~1 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.25.1. Analyzing design hierarchy..
Top module:  \adder

2.25.2. Analyzing design hierarchy..
Top module:  \adder
Removed 0 unused modules.

2.26. Printing statistics.

=== adder ===

   Number of wires:                368
   Number of wire bits:            809
   Number of public wires:          11
   Number of public wire bits:     452
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                551
     $_ANDNOT_                      60
     $_AND_                         30
     $_AOI3_                        40
     $_DFF_PN0_                    129
     $_NAND_                        37
     $_NOR_                         13
     $_NOT_                         32
     $_OAI3_                        36
     $_ORNOT_                       13
     $_OR_                          34
     $_XNOR_                        55
     $_XOR_                         72

2.27. Executing CHECK pass (checking for obvious problems).
checking module adder..
found and reported 0 problems.

3. Executing FLATTEN pass (flatten design).
No more expansions possible.

4. Executing Verilog backend.
Dumping module `\adder'.

5. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_PP1_ from mapping for $_DFF_PN1_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFF_NN0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_NP0_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NN1_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NP1_ from mapping for $_DFF_NN1_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  final dff cell mappings:
    DFF_X1 _DFF_N_ (.CK(~C), .D( D), .Q( Q), .QN(~Q));
    DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    DFFR_X1 _DFF_NN0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFR_X1 _DFF_NN1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN( R));
    DFFR_X1 _DFF_NP0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFR_X1 _DFF_NP1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN(~R));
    DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    DFFR_X1 _DFF_PP0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFS_X1 _DFF_PP1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN(~R));
    DFFRS_X1 _DFFSR_NNN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_NNP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_NPN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_NPP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
    DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_PNP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_PPN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_PPP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
Mapping DFF cells in module `\adder':
  mapped 129 $_DFF_PN0_ cells to \DFFR_X1 cells.

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\adder' to `<abc-temp-dir>/input.blif'..
Extracted 422 gates and 551 wires to a netlist network with 129 inputs and 65 outputs.

6.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /test_hw4_demo/stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "WELLTAP_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/test_hw4_demo/stdcells.lib" has 90 cells (27 skipped: 13 seq; 6 tri-state; 8 no func; 10 dont_use).  Time =     0.15 sec
ABC: Memory =    8.88 MB. Time =     0.15 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + read_constr -v /test_hw4_demo/cpu.constr 
ABC: Setting driving cell to be "BUF_X2".
ABC: Setting output load to be 0.010000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 1000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 1000 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 1000 
ABC: + dnsize -D 1000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    322 (  1.2 %)   Cap =  3.4 ff (  4.8 %)   Area =      425.87 ( 89.4 %)   Delay =  1008.73 ps  ( 21.7 %)               
ABC: Path  0 --      62 : 0    2 pi        A =   0.00  Df =   8.1   -2.1 ps  S =  10.0 ps  Cin =  0.0 ff  Cout =   6.1 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     237 : 2    2 XOR2_X2   A =   2.39  Df =  63.5   -1.0 ps  S =  28.3 ps  Cin =  4.4 ff  Cout =   6.1 ff  Cmax =  50.5 ff  G =  134  
ABC: Path  2 --     238 : 3    2 NAND3_X2  A =   1.86  Df =  88.1   -0.7 ps  S =  13.7 ps  Cin =  3.2 ff  Cout =   4.8 ff  Cmax = 116.3 ff  G =  141  
ABC: Path  3 --     240 : 3    2 AOI21_X2  A =   1.86  Df = 117.4  -14.7 ps  S =  22.9 ps  Cin =  3.1 ff  Cout =   4.0 ff  Cmax =  50.7 ff  G =  124  
ABC: Path  4 --     242 : 3    3 OAI21_X2  A =   1.86  Df = 136.3   -0.8 ps  S =  22.0 ps  Cin =  3.1 ff  Cout =   5.0 ff  Cmax =  52.1 ff  G =  153  
ABC: Path  5 --     244 : 3    3 AOI21_X2  A =   1.86  Df = 170.2  -14.5 ps  S =  27.4 ps  Cin =  3.1 ff  Cout =   6.0 ff  Cmax =  50.7 ff  G =  189  
ABC: Path  6 --     245 : 3    3 OAI21_X2  A =   1.86  Df = 193.8   -0.7 ps  S =  22.9 ps  Cin =  3.1 ff  Cout =   5.4 ff  Cmax =  52.1 ff  G =  163  
ABC: Path  7 --     246 : 3    3 AOI21_X2  A =   1.86  Df = 231.8  -18.3 ps  S =  26.9 ps  Cin =  3.1 ff  Cout =   5.8 ff  Cmax =  50.7 ff  G =  175  
ABC: Path  8 --     248 : 3    3 OAI21_X2  A =   1.86  Df = 251.3   -5.7 ps  S =  22.0 ps  Cin =  3.1 ff  Cout =   5.0 ff  Cmax =  52.1 ff  G =  153  
ABC: Path  9 --     250 : 3    2 AOI21_X2  A =   1.86  Df = 282.4  -18.3 ps  S =  24.8 ps  Cin =  3.1 ff  Cout =   4.9 ff  Cmax =  50.7 ff  G =  150  
ABC: Path 10 --     251 : 3    3 AOI21_X2  A =   1.86  Df = 309.6   -9.3 ps  S =  26.4 ps  Cin =  3.1 ff  Cout =   5.5 ff  Cmax =  50.7 ff  G =  171  
ABC: Path 11 --     253 : 4    1 AOI211_X1 A =   1.33  Df = 350.0  -17.9 ps  S =  47.3 ps  Cin =  1.6 ff  Cout =   3.1 ff  Cmax =  14.5 ff  G =  195  
ABC: Path 12 --     254 : 3    3 AOI21_X2  A =   1.86  Df = 382.2   -9.2 ps  S =  29.9 ps  Cin =  3.1 ff  Cout =   7.0 ff  Cmax =  50.7 ff  G =  216  
ABC: Path 13 --     256 : 4    1 AOI211_X2 A =   2.39  Df = 406.7   -7.7 ps  S =  30.9 ps  Cin =  3.1 ff  Cout =   1.7 ff  Cmax =  29.0 ff  G =   53  
ABC: Path 14 --     257 : 2    3 OR2_X2    A =   1.33  Df = 454.4   -8.8 ps  S =  14.9 ps  Cin =  1.6 ff  Cout =  10.1 ff  Cmax = 121.2 ff  G =  598  
ABC: Path 15 --     259 : 4    2 OAI211_X4 A =   4.52  Df = 483.7  -18.6 ps  S =  19.5 ps  Cin =  6.2 ff  Cout =   5.1 ff  Cmax = 101.6 ff  G =   77  
ABC: Path 16 --     260 : 3    1 AOI21_X2  A =   1.86  Df = 506.5   -2.8 ps  S =  27.8 ps  Cin =  3.1 ff  Cout =   6.1 ff  Cmax =  50.7 ff  G =  194  
ABC: Path 17 --     261 : 3    2 AOI21_X4  A =   3.46  Df = 546.7  -21.9 ps  S =  24.3 ps  Cin =  6.0 ff  Cout =   9.1 ff  Cmax = 101.0 ff  G =  148  
ABC: Path 18 --     262 : 3    3 OAI21_X4  A =   3.46  Df = 568.9   -7.1 ps  S =  22.3 ps  Cin =  6.1 ff  Cout =  10.1 ff  Cmax = 104.1 ff  G =  157  
ABC: Path 19 --     264 : 4    2 OAI211_X4 A =   4.52  Df = 599.1  -15.8 ps  S =  19.5 ps  Cin =  6.2 ff  Cout =   5.1 ff  Cmax = 101.6 ff  G =   77  
ABC: Path 20 --     265 : 3    1 AOI21_X2  A =   1.86  Df = 624.6   -5.5 ps  S =  27.8 ps  Cin =  3.1 ff  Cout =   6.1 ff  Cmax =  50.7 ff  G =  194  
ABC: Path 21 --     266 : 3    2 AOI21_X4  A =   3.46  Df = 662.1  -19.2 ps  S =  24.3 ps  Cin =  6.0 ff  Cout =   9.1 ff  Cmax = 101.0 ff  G =  148  
ABC: Path 22 --     267 : 3    3 OAI21_X4  A =   3.46  Df = 684.3   -4.4 ps  S =  22.3 ps  Cin =  6.1 ff  Cout =  10.1 ff  Cmax = 104.1 ff  G =  157  
ABC: Path 23 --     269 : 4    2 OAI211_X4 A =   4.52  Df = 714.4  -13.1 ps  S =  19.5 ps  Cin =  6.2 ff  Cout =   5.1 ff  Cmax = 101.6 ff  G =   77  
ABC: Path 24 --     270 : 3    1 AOI21_X2  A =   1.86  Df = 742.7   -8.2 ps  S =  27.8 ps  Cin =  3.1 ff  Cout =   6.1 ff  Cmax =  50.7 ff  G =  194  
ABC: Path 25 --     271 : 3    2 AOI21_X4  A =   3.46  Df = 777.5  -16.5 ps  S =  24.3 ps  Cin =  6.0 ff  Cout =   9.1 ff  Cmax = 101.0 ff  G =  148  
ABC: Path 26 --     272 : 3    3 OAI21_X4  A =   3.46  Df = 799.7   -1.7 ps  S =  22.3 ps  Cin =  6.1 ff  Cout =  10.1 ff  Cmax = 104.1 ff  G =  157  
ABC: Path 27 --     274 : 4    2 OAI211_X4 A =   4.52  Df = 829.8  -10.4 ps  S =  19.5 ps  Cin =  6.2 ff  Cout =   5.1 ff  Cmax = 101.6 ff  G =   77  
ABC: Path 28 --     275 : 3    1 AOI21_X2  A =   1.86  Df = 860.8  -10.9 ps  S =  27.8 ps  Cin =  3.1 ff  Cout =   6.1 ff  Cmax =  50.7 ff  G =  194  
ABC: Path 29 --     276 : 3    2 AOI21_X4  A =   3.46  Df = 888.7  -11.2 ps  S =  20.6 ps  Cin =  6.0 ff  Cout =   5.9 ff  Cmax = 101.0 ff  G =   95  
ABC: Path 30 --     277 : 3    3 OAI21_X2  A =   1.86  Df = 915.3   -5.0 ps  S =  23.2 ps  Cin =  3.1 ff  Cout =   5.5 ff  Cmax =  52.1 ff  G =  170  
ABC: Path 31 --     279 : 4    1 OAI211_X1 A =   1.33  Df = 940.9   -3.1 ps  S =  20.7 ps  Cin =  1.6 ff  Cout =   1.7 ff  Cmax =  25.6 ff  G =  106  
ABC: Path 32 --     280 : 2    2 AND2_X2   A =   1.33  Df = 975.2   -4.4 ps  S =   9.1 ps  Cin =  1.6 ff  Cout =   3.9 ff  Cmax = 120.8 ff  G =  229  
ABC: Path 33 --     515 : 2    1 XNOR2_X1  A =   1.60  Df =1008.7   -6.1 ps  S =  10.9 ps  Cin =  2.3 ff  Cout =   0.0 ff  Cmax =  26.0 ff  G =    0  
ABC: Start-point = pi61 (\bb [1]).  End-point = po63 (\tempa_w [31]).
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:       20
ABC RESULTS:           AND2_X2 cells:        1
ABC RESULTS:           AND3_X1 cells:        4
ABC RESULTS:         AOI211_X1 cells:        1
ABC RESULTS:         AOI211_X2 cells:        1
ABC RESULTS:          AOI21_X1 cells:       11
ABC RESULTS:          AOI21_X2 cells:       12
ABC RESULTS:          AOI21_X4 cells:        4
ABC RESULTS:            INV_X1 cells:        4
ABC RESULTS:          NAND2_X1 cells:       65
ABC RESULTS:          NAND3_X1 cells:        9
ABC RESULTS:          NAND3_X2 cells:        1
ABC RESULTS:           NOR2_X1 cells:       27
ABC RESULTS:           NOR2_X2 cells:        1
ABC RESULTS:         OAI211_X1 cells:        6
ABC RESULTS:         OAI211_X4 cells:        4
ABC RESULTS:          OAI21_X1 cells:       15
ABC RESULTS:          OAI21_X2 cells:        5
ABC RESULTS:          OAI21_X4 cells:        3
ABC RESULTS:            OR2_X1 cells:       13
ABC RESULTS:            OR2_X2 cells:        1
ABC RESULTS:            OR3_X1 cells:        6
ABC RESULTS:          XNOR2_X1 cells:       72
ABC RESULTS:           XOR2_X1 cells:       35
ABC RESULTS:           XOR2_X2 cells:        1
ABC RESULTS:        internal signals:      357
ABC RESULTS:           input signals:      129
ABC RESULTS:          output signals:       65
Removing temp directory.

End of script. Logfile hash: 511b9e19ce
CPU: user 0.91s system 0.02s, MEM: 31.11 MB total, 23.95 MB resident
Yosys 0.9 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 32% 1x dfflibmap (0 sec), 14% 16x opt_clean (0 sec), ...
